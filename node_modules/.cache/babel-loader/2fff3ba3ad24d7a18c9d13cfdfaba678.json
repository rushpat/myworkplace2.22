{"ast":null,"code":"var _jsxFileName = \"/Users/rushipat/Documents/Data/Programs/videochatapp/src/VideoChatContainer.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { createOffer, initiateConnection, startCall, sendAnswer, addCandidate, initiateLocalStream, listenToConnectionEvents } from \"./modules/RTCModule\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport config from \"./config\";\nimport { doOffer, doAnswer, doLogin, doCandidate } from \"./modules/FirebaseModule\";\nimport \"webrtc-adapter\";\nimport VideoChat from \"./VideoChat\";\n\nclass VideoChatContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // getting local video stream\n      console.log(\"In component did mount\");\n      console.log(this.state.username);\n      const localStream = await initiateLocalStream();\n      this.localVideoRef.srcObject = localStream;\n      const localConnection = await initiateConnection();\n      this.setState({\n        database: firebase.database(),\n        localStream,\n        localConnection\n      });\n      await this.onLogin(this.state.username);\n      const team = this.state.team;\n\n      if (team.length !== 0) {\n        this.startCall(this.state.username, team[0]);\n      }\n    };\n\n    this.startCall = async (username, userToCall) => {\n      console.log(\"In starting call\");\n      this.setState({\n        calling: true\n      });\n      const _this$state = this.state,\n            localConnection = _this$state.localConnection,\n            database = _this$state.database,\n            localStream = _this$state.localStream;\n      listenToConnectionEvents(localConnection, username, userToCall, database, this.remoteVideoRef, doCandidate); // create an offer\n\n      createOffer(localConnection, localStream, userToCall, doOffer, database, username);\n    };\n\n    this.onLogin = async username => {\n      console.log(\"In onlogin\");\n      return await doLogin(username, this.state.database, this.handleUpdate);\n    };\n\n    this.setLocalVideoRef = ref => {\n      console.log(\"In setlocalvideoref\");\n      this.localVideoRef = ref;\n    };\n\n    this.setRemoteVideoRef = ref => {\n      console.log(\"In setremotevideoref\");\n      this.remoteVideoRef = ref;\n    };\n\n    this.handleUpdate = (notif, username) => {\n      console.log(\"In handleupdate\");\n      const _this$state2 = this.state,\n            localConnection = _this$state2.localConnection,\n            database = _this$state2.database,\n            localStream = _this$state2.localStream;\n      var counter = this.state.counter;\n\n      if (notif) {\n        switch (notif.type) {\n          case \"offer\":\n            console.log(\"case offer\");\n            this.setState({\n              connectedUser: notif.from\n            });\n            listenToConnectionEvents(localConnection, username, notif.from, database, this.remoteVideoRef, doCandidate);\n            sendAnswer(localConnection, localStream, notif, doAnswer, database, username);\n            break;\n\n          case \"answer\":\n            console.log(\"case answer\");\n            this.setState({\n              connectedUser: notif.from\n            });\n            startCall(localConnection, notif);\n            counter = counter + 1;\n            this.setState({\n              counter\n            });\n            break;\n\n          case \"candidate\":\n            console.log(\"case candidate\");\n            addCandidate(localConnection, notif);\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    this.state = {\n      database: null,\n      connectedUser: null,\n      localStream: null,\n      localConnection: null,\n      username: this.props.username,\n      team: this.props.team,\n      counter: 0,\n      calling: false\n    };\n    this.localVideoRef = React.createRef();\n    this.remoteVideoRef = React.createRef();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.database !== nextState.database) {\n      return false;\n    }\n\n    if (this.state.localStream !== nextState.localStream) {\n      return false;\n    }\n\n    if (this.state.localConnection !== nextState.localConnection) {\n      return false;\n    }\n\n    return true;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"In component did update\");\n    const counter = this.state.counter;\n    console.log(counter);\n    const team = this.state.team;\n\n    if (prevState.counter !== counter && counter < team.length) {\n      this.startCall(this.state.username, team[counter]);\n    }\n  }\n\n  render() {\n    return React.createElement(VideoChat, {\n      startCall: this.startCall,\n      onLogin: this.onLogin,\n      setLocalVideoRef: this.setLocalVideoRef,\n      setRemoteVideoRef: this.setRemoteVideoRef,\n      connectedUser: this.state.connectedUser,\n      username: this.state.username,\n      team: this.state.team,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default VideoChatContainer;","map":{"version":3,"sources":["/Users/rushipat/Documents/Data/Programs/videochatapp/src/VideoChatContainer.js"],"names":["React","createOffer","initiateConnection","startCall","sendAnswer","addCandidate","initiateLocalStream","listenToConnectionEvents","firebase","config","doOffer","doAnswer","doLogin","doCandidate","VideoChat","VideoChatContainer","Component","constructor","props","componentDidMount","console","log","state","username","localStream","localVideoRef","srcObject","localConnection","setState","database","onLogin","team","length","userToCall","calling","remoteVideoRef","handleUpdate","setLocalVideoRef","ref","setRemoteVideoRef","notif","counter","type","connectedUser","from","createRef","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","prevProps","prevState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n  createOffer,\n  initiateConnection,\n  startCall,\n  sendAnswer,\n  addCandidate,\n  initiateLocalStream,\n  listenToConnectionEvents,\n} from \"./modules/RTCModule\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport config from \"./config\";\nimport {\n  doOffer,\n  doAnswer,\n  doLogin,\n  doCandidate,\n} from \"./modules/FirebaseModule\";\nimport \"webrtc-adapter\";\nimport VideoChat from \"./VideoChat\";\n\nclass VideoChatContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      database: null,\n      connectedUser: null,\n      localStream: null,\n      localConnection: null,\n      username: this.props.username,\n      team: this.props.team,\n      counter: 0,\n      calling: false,\n    };\n    this.localVideoRef = React.createRef();\n    this.remoteVideoRef = React.createRef();\n  }\n\n  componentDidMount = async () => {\n    // getting local video stream\n    console.log(\"In component did mount\");\n\n    console.log(this.state.username);\n\n    const localStream = await initiateLocalStream();\n    this.localVideoRef.srcObject = localStream;\n\n    const localConnection = await initiateConnection();\n\n    this.setState({\n      database: firebase.database(),\n      localStream,\n      localConnection,\n    });\n\n    await this.onLogin(this.state.username);\n\n    const team = this.state.team;\n\n    if (team.length !== 0) {\n      this.startCall(this.state.username, team[0]);\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.database !== nextState.database) {\n      return false;\n    }\n    if (this.state.localStream !== nextState.localStream) {\n      return false;\n    }\n    if (this.state.localConnection !== nextState.localConnection) {\n      return false;\n    }\n\n    return true;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"In component did update\");\n\n    const counter = this.state.counter;\n    console.log(counter);\n    const team = this.state.team;\n\n    if (prevState.counter !== counter && counter < team.length) {\n      this.startCall(this.state.username, team[counter]);\n    }\n  }\n\n  startCall = async (username, userToCall) => {\n    console.log(\"In starting call\");\n    this.setState({ calling: true });\n\n    const { localConnection, database, localStream } = this.state;\n    listenToConnectionEvents(\n      localConnection,\n      username,\n      userToCall,\n      database,\n      this.remoteVideoRef,\n      doCandidate\n    );\n    // create an offer\n    createOffer(\n      localConnection,\n      localStream,\n      userToCall,\n      doOffer,\n      database,\n      username\n    );\n  };\n\n  onLogin = async (username) => {\n    console.log(\"In onlogin\");\n    return await doLogin(username, this.state.database, this.handleUpdate);\n  };\n\n  setLocalVideoRef = (ref) => {\n    console.log(\"In setlocalvideoref\");\n    this.localVideoRef = ref;\n  };\n\n  setRemoteVideoRef = (ref) => {\n    console.log(\"In setremotevideoref\");\n    this.remoteVideoRef = ref;\n  };\n\n  handleUpdate = (notif, username) => {\n    console.log(\"In handleupdate\");\n    const { localConnection, database, localStream } = this.state;\n    var counter = this.state.counter;\n\n    if (notif) {\n      switch (notif.type) {\n        case \"offer\":\n          console.log(\"case offer\");\n          this.setState({\n            connectedUser: notif.from,\n          });\n\n          listenToConnectionEvents(\n            localConnection,\n            username,\n            notif.from,\n            database,\n            this.remoteVideoRef,\n            doCandidate\n          );\n\n          sendAnswer(\n            localConnection,\n            localStream,\n            notif,\n            doAnswer,\n            database,\n            username\n          );\n          break;\n        case \"answer\":\n          console.log(\"case answer\");\n          this.setState({\n            connectedUser: notif.from,\n          });\n          startCall(localConnection, notif);\n          counter = counter + 1;\n          this.setState({ counter });\n          break;\n        case \"candidate\":\n          console.log(\"case candidate\");\n          addCandidate(localConnection, notif);\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  render() {\n    return (\n      <VideoChat\n        startCall={this.startCall}\n        onLogin={this.onLogin}\n        setLocalVideoRef={this.setLocalVideoRef}\n        setRemoteVideoRef={this.setRemoteVideoRef}\n        connectedUser={this.state.connectedUser}\n        username={this.state.username}\n        team={this.state.team}\n      />\n    );\n  }\n}\n\nexport default VideoChatContainer;\n"]},"metadata":{},"sourceType":"module"}