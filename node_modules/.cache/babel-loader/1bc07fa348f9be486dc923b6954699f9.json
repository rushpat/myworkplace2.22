{"ast":null,"code":"var _jsxFileName = \"/Users/rushipat/Documents/Data/Programs/videochatapp/src/VideoChatContainer.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { createOffer, initiateConnection, startCall, sendAnswer, addCandidate, initiateLocalStream, listenToConnectionEvents } from \"./modules/RTCModule\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport config from \"./config\";\nimport { doOffer, doAnswer, doLogin, doCandidate, removeNotifs } from \"./modules/FirebaseModule\";\nimport \"webrtc-adapter\";\nimport VideoChat from \"./VideoChat\";\n\nclass VideoChatContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // getting local video stream\n      console.log(\"In component did mount\");\n      console.log(this.state.username);\n      const localStream = await initiateLocalStream();\n      this.localVideoRef.srcObject = localStream;\n      const localConnection1 = await initiateConnection();\n      const localConnection2 = await initiateConnection();\n      const localConnection3 = await initiateConnection();\n      const localConnection4 = await initiateConnection();\n      const localConnection = [localConnection1, localConnection2, localConnection3, localConnection4];\n      this.setState({\n        database: firebase.database(),\n        localStream,\n        localConnection\n      });\n      await this.onLogin(this.state.username);\n      const team = this.state.team;\n\n      if (team.length !== 0) {\n        this.startCall(this.state.username, team[0]);\n      }\n    };\n\n    this.startCall = async (username, userToCall) => {\n      console.log(\"In starting call\");\n      this.setState({\n        calling: true\n      });\n      const _this$state = this.state,\n            localConnection = _this$state.localConnection,\n            database = _this$state.database,\n            localStream = _this$state.localStream;\n      listenToConnectionEvents(localConnection, username, userToCall, database, this.remoteVideoRef, doCandidate); // create an offer\n\n      createOffer(localConnection, localStream, userToCall, doOffer, database, username);\n    };\n\n    this.onLogin = async username => {\n      console.log(\"In onlogin\");\n      return await doLogin(username, this.state.database, this.handleUpdate);\n    };\n\n    this.setLocalVideoRef = ref => {\n      console.log(\"In setlocalvideoref\");\n      this.localVideoRef = ref;\n    };\n\n    this.setRemoteVideoRef = ref => {\n      console.log(\"In setremotevideoref\");\n      this.remoteVideoRef = ref;\n    };\n\n    this.handleUpdate = (notif, username) => {\n      console.log(\"In handleupdate\");\n      const _this$state2 = this.state,\n            localConnection = _this$state2.localConnection,\n            database = _this$state2.database,\n            localStream = _this$state2.localStream;\n      var counter = this.state.counter;\n      var calling = this.state.calling;\n      const user = this.state.username;\n      const connectedUser = this.state.connectedUser;\n      console.log(connectedUser);\n\n      if (notif) {\n        switch (notif.type) {\n          case \"offer\":\n            console.log(\"case offer\");\n            this.setState({\n              connectedUser: notif.from\n            });\n            listenToConnectionEvents(localConnection, username, notif.from, database, this.remoteVideoRef, doCandidate);\n            sendAnswer(localConnection, localStream, notif, doAnswer, database, username);\n            break;\n\n          case \"answer\":\n            console.log(\"case answer\");\n            this.setState({\n              connectedUser: notif.from\n            });\n            startCall(localConnection, notif);\n            counter = counter + 1;\n            this.setState({\n              counter\n            });\n            break;\n\n          case \"candidate\":\n            console.log(\"case candidate\");\n            addCandidate(localConnection, notif);\n\n            if (calling === true) {\n              this.setState({\n                calling: false\n              });\n              removeNotifs(database, user, connectedUser);\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    this.state = {\n      database: null,\n      connectedUser: null,\n      localStream: null,\n      localConnection: null,\n      username: this.props.username,\n      team: this.props.team,\n      counter: 0,\n      calling: false\n    };\n    this.localVideoRef = React.createRef();\n    this.remoteVideoRef = React.createRef();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.database !== nextState.database) {\n      return false;\n    }\n\n    if (this.state.localStream !== nextState.localStream) {\n      return false;\n    }\n\n    if (this.state.localConnection !== nextState.localConnection) {\n      return false;\n    }\n\n    return true;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"In component did update\");\n    const counter = this.state.counter;\n    console.log(counter);\n    const team = this.state.team;\n\n    if (prevState.counter !== counter && counter < team.length) {\n      this.startCall(this.state.username, team[counter]);\n    }\n  }\n\n  render() {\n    return React.createElement(VideoChat, {\n      startCall: this.startCall,\n      onLogin: this.onLogin,\n      setLocalVideoRef: this.setLocalVideoRef,\n      setRemoteVideoRef: this.setRemoteVideoRef,\n      connectedUser: this.state.connectedUser,\n      username: this.state.username,\n      team: this.state.team,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default VideoChatContainer;","map":{"version":3,"sources":["/Users/rushipat/Documents/Data/Programs/videochatapp/src/VideoChatContainer.js"],"names":["React","createOffer","initiateConnection","startCall","sendAnswer","addCandidate","initiateLocalStream","listenToConnectionEvents","firebase","config","doOffer","doAnswer","doLogin","doCandidate","removeNotifs","VideoChat","VideoChatContainer","Component","constructor","props","componentDidMount","console","log","state","username","localStream","localVideoRef","srcObject","localConnection1","localConnection2","localConnection3","localConnection4","localConnection","setState","database","onLogin","team","length","userToCall","calling","remoteVideoRef","handleUpdate","setLocalVideoRef","ref","setRemoteVideoRef","notif","counter","user","connectedUser","type","from","createRef","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","prevProps","prevState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n  createOffer,\n  initiateConnection,\n  startCall,\n  sendAnswer,\n  addCandidate,\n  initiateLocalStream,\n  listenToConnectionEvents,\n} from \"./modules/RTCModule\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport config from \"./config\";\nimport {\n  doOffer,\n  doAnswer,\n  doLogin,\n  doCandidate,\n  removeNotifs,\n} from \"./modules/FirebaseModule\";\nimport \"webrtc-adapter\";\nimport VideoChat from \"./VideoChat\";\n\nclass VideoChatContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      database: null,\n      connectedUser: null,\n      localStream: null,\n      localConnection: null,\n      username: this.props.username,\n      team: this.props.team,\n      counter: 0,\n      calling: false,\n    };\n    this.localVideoRef = React.createRef();\n    this.remoteVideoRef = React.createRef();\n  }\n\n  componentDidMount = async () => {\n    // getting local video stream\n    console.log(\"In component did mount\");\n\n    console.log(this.state.username);\n\n    const localStream = await initiateLocalStream();\n    this.localVideoRef.srcObject = localStream;\n\n    const localConnection1 = await initiateConnection();\n    const localConnection2 = await initiateConnection();\n    const localConnection3 = await initiateConnection();\n    const localConnection4 = await initiateConnection();\n\n    const localConnection = [\n      localConnection1,\n      localConnection2,\n      localConnection3,\n      localConnection4,\n    ];\n\n    this.setState({\n      database: firebase.database(),\n      localStream,\n      localConnection,\n    });\n\n    await this.onLogin(this.state.username);\n\n    const team = this.state.team;\n\n    if (team.length !== 0) {\n      this.startCall(this.state.username, team[0]);\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.database !== nextState.database) {\n      return false;\n    }\n    if (this.state.localStream !== nextState.localStream) {\n      return false;\n    }\n    if (this.state.localConnection !== nextState.localConnection) {\n      return false;\n    }\n\n    return true;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"In component did update\");\n\n    const counter = this.state.counter;\n    console.log(counter);\n    const team = this.state.team;\n\n    if (prevState.counter !== counter && counter < team.length) {\n      this.startCall(this.state.username, team[counter]);\n    }\n  }\n\n  startCall = async (username, userToCall) => {\n    console.log(\"In starting call\");\n    this.setState({ calling: true });\n\n    const { localConnection, database, localStream } = this.state;\n    listenToConnectionEvents(\n      localConnection,\n      username,\n      userToCall,\n      database,\n      this.remoteVideoRef,\n      doCandidate\n    );\n    // create an offer\n    createOffer(\n      localConnection,\n      localStream,\n      userToCall,\n      doOffer,\n      database,\n      username\n    );\n  };\n\n  onLogin = async (username) => {\n    console.log(\"In onlogin\");\n    return await doLogin(username, this.state.database, this.handleUpdate);\n  };\n\n  setLocalVideoRef = (ref) => {\n    console.log(\"In setlocalvideoref\");\n    this.localVideoRef = ref;\n  };\n\n  setRemoteVideoRef = (ref) => {\n    console.log(\"In setremotevideoref\");\n    this.remoteVideoRef = ref;\n  };\n\n  handleUpdate = (notif, username) => {\n    console.log(\"In handleupdate\");\n    const { localConnection, database, localStream } = this.state;\n    var counter = this.state.counter;\n    var calling = this.state.calling;\n    const user = this.state.username;\n    const connectedUser = this.state.connectedUser;\n    console.log(connectedUser);\n\n    if (notif) {\n      switch (notif.type) {\n        case \"offer\":\n          console.log(\"case offer\");\n          this.setState({\n            connectedUser: notif.from,\n          });\n\n          listenToConnectionEvents(\n            localConnection,\n            username,\n            notif.from,\n            database,\n            this.remoteVideoRef,\n            doCandidate\n          );\n\n          sendAnswer(\n            localConnection,\n            localStream,\n            notif,\n            doAnswer,\n            database,\n            username\n          );\n          break;\n        case \"answer\":\n          console.log(\"case answer\");\n          this.setState({\n            connectedUser: notif.from,\n          });\n          startCall(localConnection, notif);\n          counter = counter + 1;\n          this.setState({ counter });\n          break;\n        case \"candidate\":\n          console.log(\"case candidate\");\n          addCandidate(localConnection, notif);\n          if (calling === true) {\n            this.setState({ calling: false });\n            removeNotifs(database, user, connectedUser);\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  render() {\n    return (\n      <VideoChat\n        startCall={this.startCall}\n        onLogin={this.onLogin}\n        setLocalVideoRef={this.setLocalVideoRef}\n        setRemoteVideoRef={this.setRemoteVideoRef}\n        connectedUser={this.state.connectedUser}\n        username={this.state.username}\n        team={this.state.team}\n      />\n    );\n  }\n}\n\nexport default VideoChatContainer;\n"]},"metadata":{},"sourceType":"module"}