{"ast":null,"code":"var _jsxFileName = \"/Users/rushipat/Documents/Data/Programs/videochatapp/src/VideoChatContainer.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { createOffer, initiateConnection, startCall, sendAnswer, addCandidate, initiateLocalStream, listenToConnectionEvents } from \"./modules/RTCModule\"; //import firebase from 'firebase/app'\n\nimport \"firebase/database\";\nimport config from \"./config\";\nimport { doOffer, doAnswer, doLogin, doCandidate } from \"./modules/FirebaseModule\";\nimport \"webrtc-adapter\";\nimport VideoChat from \"./VideoChat\";\n\nclass VideoChatContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      //firebase.initializeApp(config)\n      // getting local video stream\n      const localStream = await initiateLocalStream();\n      this.localVideoRef.srcObject = localStream;\n      const localConnection = await initiateConnection();\n      this.setState({\n        database: firebase.database(),\n        localStream,\n        localConnection\n      });\n    };\n\n    this.startCall = async (username, userToCall) => {\n      const _this$state = this.state,\n            localConnection = _this$state.localConnection,\n            database = _this$state.database,\n            localStream = _this$state.localStream;\n      listenToConnectionEvents(localConnection, username, userToCall, database, this.remoteVideoRef, doCandidate); // create an offer\n\n      createOffer(localConnection, localStream, userToCall, doOffer, database, username);\n    };\n\n    this.onLogin = async username => {\n      return await doLogin(username, this.state.database, this.handleUpdate);\n    };\n\n    this.setLocalVideoRef = ref => {\n      this.localVideoRef = ref;\n    };\n\n    this.setRemoteVideoRef = ref => {\n      this.remoteVideoRef = ref;\n    };\n\n    this.handleUpdate = (notif, username) => {\n      const _this$state2 = this.state,\n            localConnection = _this$state2.localConnection,\n            database = _this$state2.database,\n            localStream = _this$state2.localStream;\n\n      if (notif) {\n        switch (notif.type) {\n          case \"offer\":\n            this.setState({\n              connectedUser: notif.from\n            });\n            listenToConnectionEvents(localConnection, username, notif.from, database, this.remoteVideoRef, doCandidate);\n            sendAnswer(localConnection, localStream, notif, doAnswer, database, username);\n            break;\n\n          case \"answer\":\n            this.setState({\n              connectedUser: notif.from\n            });\n            startCall(localConnection, notif);\n            break;\n\n          case \"candidate\":\n            addCandidate(localConnection, notif);\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    this.state = {\n      database: null,\n      connectedUser: null,\n      localStream: null,\n      localConnection: null\n    };\n    this.localVideoRef = React.createRef();\n    this.remoteVideoRef = React.createRef();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.database !== nextState.database) {\n      return false;\n    }\n\n    if (this.state.localStream !== nextState.localStream) {\n      return false;\n    }\n\n    if (this.state.localConnection !== nextState.localConnection) {\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    return React.createElement(VideoChat, {\n      startCall: this.startCall,\n      onLogin: this.onLogin,\n      setLocalVideoRef: this.setLocalVideoRef,\n      setRemoteVideoRef: this.setRemoteVideoRef,\n      connectedUser: this.state.connectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default VideoChatContainer;","map":{"version":3,"sources":["/Users/rushipat/Documents/Data/Programs/videochatapp/src/VideoChatContainer.js"],"names":["React","createOffer","initiateConnection","startCall","sendAnswer","addCandidate","initiateLocalStream","listenToConnectionEvents","config","doOffer","doAnswer","doLogin","doCandidate","VideoChat","VideoChatContainer","Component","constructor","props","componentDidMount","localStream","localVideoRef","srcObject","localConnection","setState","database","firebase","username","userToCall","state","remoteVideoRef","onLogin","handleUpdate","setLocalVideoRef","ref","setRemoteVideoRef","notif","type","connectedUser","from","createRef","shouldComponentUpdate","nextProps","nextState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n  createOffer,\n  initiateConnection,\n  startCall,\n  sendAnswer,\n  addCandidate,\n  initiateLocalStream,\n  listenToConnectionEvents,\n} from \"./modules/RTCModule\";\n//import firebase from 'firebase/app'\nimport \"firebase/database\";\nimport config from \"./config\";\nimport {\n  doOffer,\n  doAnswer,\n  doLogin,\n  doCandidate,\n} from \"./modules/FirebaseModule\";\nimport \"webrtc-adapter\";\nimport VideoChat from \"./VideoChat\";\n\nclass VideoChatContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      database: null,\n      connectedUser: null,\n      localStream: null,\n      localConnection: null,\n    };\n    this.localVideoRef = React.createRef();\n    this.remoteVideoRef = React.createRef();\n  }\n\n  componentDidMount = async () => {\n    //firebase.initializeApp(config)\n\n    // getting local video stream\n    const localStream = await initiateLocalStream();\n    this.localVideoRef.srcObject = localStream;\n\n    const localConnection = await initiateConnection();\n\n    this.setState({\n      database: firebase.database(),\n      localStream,\n      localConnection,\n    });\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.database !== nextState.database) {\n      return false;\n    }\n    if (this.state.localStream !== nextState.localStream) {\n      return false;\n    }\n    if (this.state.localConnection !== nextState.localConnection) {\n      return false;\n    }\n\n    return true;\n  }\n\n  startCall = async (username, userToCall) => {\n    const { localConnection, database, localStream } = this.state;\n    listenToConnectionEvents(\n      localConnection,\n      username,\n      userToCall,\n      database,\n      this.remoteVideoRef,\n      doCandidate\n    );\n    // create an offer\n    createOffer(\n      localConnection,\n      localStream,\n      userToCall,\n      doOffer,\n      database,\n      username\n    );\n  };\n\n  onLogin = async (username) => {\n    return await doLogin(username, this.state.database, this.handleUpdate);\n  };\n\n  setLocalVideoRef = (ref) => {\n    this.localVideoRef = ref;\n  };\n\n  setRemoteVideoRef = (ref) => {\n    this.remoteVideoRef = ref;\n  };\n\n  handleUpdate = (notif, username) => {\n    const { localConnection, database, localStream } = this.state;\n\n    if (notif) {\n      switch (notif.type) {\n        case \"offer\":\n          this.setState({\n            connectedUser: notif.from,\n          });\n\n          listenToConnectionEvents(\n            localConnection,\n            username,\n            notif.from,\n            database,\n            this.remoteVideoRef,\n            doCandidate\n          );\n\n          sendAnswer(\n            localConnection,\n            localStream,\n            notif,\n            doAnswer,\n            database,\n            username\n          );\n          break;\n        case \"answer\":\n          this.setState({\n            connectedUser: notif.from,\n          });\n          startCall(localConnection, notif);\n          break;\n        case \"candidate\":\n          addCandidate(localConnection, notif);\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  render() {\n    return (\n      <VideoChat\n        startCall={this.startCall}\n        onLogin={this.onLogin}\n        setLocalVideoRef={this.setLocalVideoRef}\n        setRemoteVideoRef={this.setRemoteVideoRef}\n        connectedUser={this.state.connectedUser}\n      />\n    );\n  }\n}\n\nexport default VideoChatContainer;\n"]},"metadata":{},"sourceType":"module"}