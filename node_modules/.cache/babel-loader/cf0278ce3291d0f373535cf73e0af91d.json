{"ast":null,"code":"export const createOffer = async (connection, localStream, userToCall, doOffer, database, username) => {\n  console.log(\"In createoffer\");\n\n  try {\n    connection.addStream(localStream);\n    const offer = await connection.createOffer();\n    await connection.setLocalDescription(offer);\n    doOffer(userToCall, offer, database, username);\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const initiateLocalStream = async () => {\n  console.log(\"In initiatelocalstream\");\n\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    return stream;\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const initiateConnection = async () => {\n  console.log(\"In initiateconnection\");\n\n  try {\n    // using Google public stun server\n    var configuration = {\n      iceServers: [{\n        urls: \"stun:stun2.1.google.com:19302\"\n      }]\n    };\n    const conn = new RTCPeerConnection(configuration);\n    return conn;\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const listenToConnectionEvents = (conn, username, remoteUsername, database, remoteVideoRef, doCandidate) => {\n  console.log(\"In listentoconnectionevents\");\n\n  conn.onicecandidate = function (event) {\n    if (event.candidate) {\n      doCandidate(remoteUsername, event.candidate, database, username);\n    }\n  }; // when a remote user adds stream to the peer connection, we display it\n\n\n  conn.ontrack = function (e) {\n    if (remoteVideoRef.srcObject !== e.streams[0]) {\n      remoteVideoRef.srcObject = e.streams[0];\n    }\n  };\n};\nexport const sendAnswer = async (conn, localStream, notif, doAnswer, database, username) => {\n  console.log(\"In sendanswer\");\n\n  try {\n    conn.addStream(localStream);\n    const offer = JSON.parse(notif.offer);\n    conn.setRemoteDescription(offer); // create an answer to an offer\n\n    const answer = await conn.createAnswer();\n    conn.setLocalDescription(answer);\n    doAnswer(notif.from, answer, database, username);\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const startCall = (yourConn, notif) => {\n  console.log(\"In startcall\");\n  const answer = JSON.parse(notif.answer);\n  yourConn.setRemoteDescription(answer);\n};\nexport const addCandidate = (yourConn, notif) => {\n  console.log(\"In addcandidate\"); // apply the new received candidate to the connection\n\n  const candidate = JSON.parse(notif.candidate);\n  yourConn.addIceCandidate(new RTCIceCandidate(candidate));\n};","map":{"version":3,"sources":["/Users/rushipat/Documents/Data/Programs/videochatapp/src/modules/RTCModule.js"],"names":["createOffer","connection","localStream","userToCall","doOffer","database","username","console","log","addStream","offer","setLocalDescription","exception","error","initiateLocalStream","stream","navigator","mediaDevices","getUserMedia","video","audio","initiateConnection","configuration","iceServers","urls","conn","RTCPeerConnection","listenToConnectionEvents","remoteUsername","remoteVideoRef","doCandidate","onicecandidate","event","candidate","ontrack","e","srcObject","streams","sendAnswer","notif","doAnswer","JSON","parse","setRemoteDescription","answer","createAnswer","from","startCall","yourConn","addCandidate","addIceCandidate","RTCIceCandidate"],"mappings":"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","sourcesContent":["export const createOffer = async (\n  connection,\n  localStream,\n  userToCall,\n  doOffer,\n  database,\n  username\n) => {\n  console.log(\"In createoffer\");\n  try {\n    connection.addStream(localStream);\n\n    const offer = await connection.createOffer();\n    await connection.setLocalDescription(offer);\n\n    doOffer(userToCall, offer, database, username);\n  } catch (exception) {\n    console.error(exception);\n  }\n};\n\nexport const initiateLocalStream = async () => {\n  console.log(\"In initiatelocalstream\");\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true,\n    });\n    return stream;\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const initiateConnection = async () => {\n  console.log(\"In initiateconnection\");\n  try {\n    // using Google public stun server\n    var configuration = {\n      iceServers: [{ urls: \"stun:stun2.1.google.com:19302\" }],\n    };\n\n    const conn = new RTCPeerConnection(configuration);\n\n    return conn;\n  } catch (exception) {\n    console.error(exception);\n  }\n};\n\nexport const listenToConnectionEvents = (\n  conn,\n  username,\n  remoteUsername,\n  database,\n  remoteVideoRef,\n  doCandidate\n) => {\n  console.log(\"In listentoconnectionevents\");\n  conn.onicecandidate = function (event) {\n    if (event.candidate) {\n      doCandidate(remoteUsername, event.candidate, database, username);\n    }\n  };\n\n  // when a remote user adds stream to the peer connection, we display it\n  conn.ontrack = function (e) {\n    if (remoteVideoRef.srcObject !== e.streams[0]) {\n      remoteVideoRef.srcObject = e.streams[0];\n    }\n  };\n};\n\nexport const sendAnswer = async (\n  conn,\n  localStream,\n  notif,\n  doAnswer,\n  database,\n  username\n) => {\n  console.log(\"In sendanswer\");\n  try {\n    conn.addStream(localStream);\n\n    const offer = JSON.parse(notif.offer);\n    conn.setRemoteDescription(offer);\n\n    // create an answer to an offer\n    const answer = await conn.createAnswer();\n    conn.setLocalDescription(answer);\n\n    doAnswer(notif.from, answer, database, username);\n  } catch (exception) {\n    console.error(exception);\n  }\n};\n\nexport const startCall = (yourConn, notif) => {\n  console.log(\"In startcall\");\n  const answer = JSON.parse(notif.answer);\n  yourConn.setRemoteDescription(answer);\n};\n\nexport const addCandidate = (yourConn, notif) => {\n  console.log(\"In addcandidate\");\n  // apply the new received candidate to the connection\n  const candidate = JSON.parse(notif.candidate);\n  yourConn.addIceCandidate(new RTCIceCandidate(candidate));\n};\n"]},"metadata":{},"sourceType":"module"}