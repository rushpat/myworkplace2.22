{"ast":null,"code":"export const createOffer = async (connection, localStream, userToCall, doOffer, database, username) => {\n  try {\n    connection.addStream(localStream);\n    const offer = await connection.createOffer();\n    await connection.setLocalDescription(offer);\n    doOffer(userToCall, offer, database, username);\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const initiateLocalStream = async () => {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    return stream;\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const initiateConnection = async () => {\n  try {\n    // using Google public stun server\n    var configuration = {\n      iceServers: [{\n        urls: 'stun:stun2.1.google.com:19302'\n      }]\n    };\n    const conn = new RTCPeerConnection(configuration);\n    return conn;\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const listenToConnectionEvents = (conn, username, remoteUsername, database, remoteVideoRef, doCandidate) => {\n  conn.onicecandidate = function (event) {\n    if (event.candidate) {\n      doCandidate(remoteUsername, event.candidate, database, username);\n    }\n  }; // when a remote user adds stream to the peer connection, we display it\n\n\n  conn.ontrack = function (e) {\n    if (remoteVideoRef.srcObject !== e.streams[0]) {\n      remoteVideoRef.srcObject = e.streams[0];\n    }\n  };\n};\nexport const sendAnswer = async (conn, localStream, notif, doAnswer, database, username) => {\n  try {\n    conn.addStream(localStream);\n    const offer = JSON.parse(notif.offer);\n    conn.setRemoteDescription(offer); // create an answer to an offer\n\n    const answer = await conn.createAnswer();\n    conn.setLocalDescription(answer);\n    doAnswer(notif.from, answer, database, username);\n  } catch (exception) {\n    console.error(exception);\n  }\n};\nexport const startCall = (yourConn, notif) => {\n  const answer = JSON.parse(notif.answer);\n  yourConn.setRemoteDescription(answer);\n};\nexport const addCandidate = (yourConn, notif) => {\n  // apply the new received candidate to the connection\n  const candidate = JSON.parse(notif.candidate);\n  yourConn.addIceCandidate(new RTCIceCandidate(candidate));\n};","map":{"version":3,"sources":["/Users/rushipat/Documents/Data/Programs/videochatapp/src/modules/RTCModule.js"],"names":["createOffer","connection","localStream","userToCall","doOffer","database","username","addStream","offer","setLocalDescription","exception","console","error","initiateLocalStream","stream","navigator","mediaDevices","getUserMedia","video","audio","initiateConnection","configuration","iceServers","urls","conn","RTCPeerConnection","listenToConnectionEvents","remoteUsername","remoteVideoRef","doCandidate","onicecandidate","event","candidate","ontrack","e","srcObject","streams","sendAnswer","notif","doAnswer","JSON","parse","setRemoteDescription","answer","createAnswer","from","startCall","yourConn","addCandidate","addIceCandidate","RTCIceCandidate"],"mappings":"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","sourcesContent":["\nexport const createOffer = async (connection, localStream, userToCall, doOffer, database, username) => {\n  try {\n    connection.addStream(localStream)\n\n    const offer = await connection.createOffer()\n    await connection.setLocalDescription(offer)\n\n    doOffer(userToCall, offer, database, username)\n  } catch (exception) {\n    console.error(exception)\n  }\n}\n\nexport const initiateLocalStream = async () => {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    })\n    return stream\n  } catch (exception) {\n    console.error(exception)\n  }\n}\nexport const initiateConnection = async () => {\n  try {\n    // using Google public stun server\n    var configuration = {\n      iceServers: [{ urls: 'stun:stun2.1.google.com:19302' }]\n    }\n\n    const conn = new RTCPeerConnection(configuration)\n\n    return conn\n  } catch (exception) {\n    console.error(exception)\n  }\n}\n\nexport const listenToConnectionEvents = (conn, username, remoteUsername, database, remoteVideoRef, doCandidate) => {\n  conn.onicecandidate = function (event) {\n    if (event.candidate) {\n      doCandidate(remoteUsername, event.candidate, database, username)\n    }\n  }\n\n  // when a remote user adds stream to the peer connection, we display it\n  conn.ontrack = function (e) {\n    if (remoteVideoRef.srcObject !== e.streams[0]) {\n      remoteVideoRef.srcObject = e.streams[0]\n    }\n  }\n}\n\nexport const sendAnswer = async (conn, localStream, notif, doAnswer, database, username) => {\n  try {\n    conn.addStream(localStream)\n\n    const offer = JSON.parse(notif.offer)\n    conn.setRemoteDescription(offer)\n\n    // create an answer to an offer\n    const answer = await conn.createAnswer()\n    conn.setLocalDescription(answer)\n\n    doAnswer(notif.from, answer, database, username)\n  } catch (exception) {\n    console.error(exception)\n  }\n}\n\nexport const startCall = (yourConn, notif) => {\n  const answer = JSON.parse(notif.answer)\n  yourConn.setRemoteDescription(answer)\n}\n\nexport const addCandidate = (yourConn, notif) => {\n  // apply the new received candidate to the connection\n  const candidate = JSON.parse(notif.candidate)\n  yourConn.addIceCandidate(new RTCIceCandidate(candidate))\n}\n"]},"metadata":{},"sourceType":"module"}