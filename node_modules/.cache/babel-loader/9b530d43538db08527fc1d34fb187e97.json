{"ast":null,"code":"var _jsxFileName = \"/Users/rushipat/Documents/Data/Programs/videochatapp/src/VideoChatContainer.js\";\nimport React from 'react';\nimport './App.css';\nimport { createOffer, initiateConnection, startCall, sendAnswer, addCandidate, initiateLocalStream, listenToConnectionEvents } from './modules/RTCModule';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport config from './config';\nimport { doOffer, doAnswer, doLogin, doCandidate } from './modules/FirebaseModule';\nimport 'webrtc-adapter';\nimport VideoChat from './VideoChat';\n\nclass VideoChatContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      firebase.initializeApp(config); // getting local video stream\n\n      const localStream = await initiateLocalStream();\n      this.localVideoRef.srcObject = localStream;\n      const localConnection = await initiateConnection();\n      this.setState({\n        database: firebase.database(),\n        localStream,\n        localConnection\n      });\n    };\n\n    this.startCall = async (username, userToCall) => {\n      const _this$state = this.state,\n            localConnection = _this$state.localConnection,\n            database = _this$state.database,\n            localStream = _this$state.localStream;\n      listenToConnectionEvents(localConnection, username, userToCall, database, this.remoteVideoRef, doCandidate); // create an offer\n\n      createOffer(localConnection, localStream, userToCall, doOffer, database, username);\n    };\n\n    this.onLogin = async username => {\n      return await doLogin(username, this.state.database, this.handleUpdate);\n    };\n\n    this.setLocalVideoRef = ref => {\n      this.localVideoRef = ref;\n    };\n\n    this.setRemoteVideoRef = ref => {\n      this.remoteVideoRef = ref;\n    };\n\n    this.handleUpdate = (notif, username) => {\n      const _this$state2 = this.state,\n            localConnection = _this$state2.localConnection,\n            database = _this$state2.database,\n            localStream = _this$state2.localStream;\n\n      if (notif) {\n        switch (notif.type) {\n          case 'offer':\n            this.setState({\n              connectedUser: notif.from\n            });\n            listenToConnectionEvents(localConnection, username, notif.from, database, this.remoteVideoRef, doCandidate);\n            sendAnswer(localConnection, localStream, notif, doAnswer, database, username);\n            break;\n\n          case 'answer':\n            this.setState({\n              connectedUser: notif.from\n            });\n            startCall(localConnection, notif);\n            break;\n\n          case 'candidate':\n            addCandidate(localConnection, notif);\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    this.state = {\n      database: null,\n      connectedUser: null,\n      localStream: null,\n      localConnection: null\n    };\n    this.localVideoRef = React.createRef();\n    this.remoteVideoRef = React.createRef();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.database !== nextState.database) {\n      return false;\n    }\n\n    if (this.state.localStream !== nextState.localStream) {\n      return false;\n    }\n\n    if (this.state.localConnection !== nextState.localConnection) {\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    return React.createElement(VideoChat, {\n      startCall: this.startCall,\n      onLogin: this.onLogin,\n      setLocalVideoRef: this.setLocalVideoRef,\n      setRemoteVideoRef: this.setRemoteVideoRef,\n      connectedUser: this.state.connectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default VideoChatContainer;","map":{"version":3,"sources":["/Users/rushipat/Documents/Data/Programs/videochatapp/src/VideoChatContainer.js"],"names":["React","createOffer","initiateConnection","startCall","sendAnswer","addCandidate","initiateLocalStream","listenToConnectionEvents","firebase","config","doOffer","doAnswer","doLogin","doCandidate","VideoChat","VideoChatContainer","Component","constructor","props","componentDidMount","initializeApp","localStream","localVideoRef","srcObject","localConnection","setState","database","username","userToCall","state","remoteVideoRef","onLogin","handleUpdate","setLocalVideoRef","ref","setRemoteVideoRef","notif","type","connectedUser","from","createRef","shouldComponentUpdate","nextProps","nextState","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport { createOffer, initiateConnection, startCall, sendAnswer, addCandidate, initiateLocalStream, listenToConnectionEvents } from './modules/RTCModule'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\nimport config from './config'\nimport { doOffer, doAnswer, doLogin, doCandidate } from './modules/FirebaseModule'\nimport 'webrtc-adapter'\nimport VideoChat from './VideoChat'\n\nclass VideoChatContainer extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      database: null,\n      connectedUser: null,\n      localStream: null,\n      localConnection: null\n    }\n    this.localVideoRef = React.createRef()\n    this.remoteVideoRef = React.createRef()\n  }\n\n    componentDidMount = async () => {\n      firebase.initializeApp(config)\n\n      // getting local video stream\n      const localStream = await initiateLocalStream()\n      this.localVideoRef.srcObject = localStream\n\n      const localConnection = await initiateConnection()\n\n      this.setState({\n        database: firebase.database(),\n        localStream,\n        localConnection\n      })\n    }\n\n    shouldComponentUpdate (nextProps, nextState) {\n      if (this.state.database !== nextState.database) {\n        return false\n      }\n      if (this.state.localStream !== nextState.localStream) {\n        return false\n      }\n      if (this.state.localConnection !== nextState.localConnection) {\n        return false\n      }\n\n      return true\n    }\n\n    startCall = async (username, userToCall) => {\n      const { localConnection, database, localStream } = this.state\n      listenToConnectionEvents(localConnection, username, userToCall, database, this.remoteVideoRef, doCandidate)\n      // create an offer\n      createOffer(localConnection, localStream, userToCall, doOffer, database, username)\n    }\n\n    onLogin = async (username) => {\n      return await doLogin(username, this.state.database, this.handleUpdate)\n    }\n\n    setLocalVideoRef = ref => {\n      this.localVideoRef = ref\n    }\n\n    setRemoteVideoRef = ref => {\n      this.remoteVideoRef = ref\n    }\n\n    handleUpdate = (notif, username) => {\n      const { localConnection, database, localStream } = this.state\n\n      if (notif) {\n        switch (notif.type) {\n          case 'offer':\n            this.setState({\n              connectedUser: notif.from\n            })\n\n            listenToConnectionEvents(localConnection, username, notif.from, database, this.remoteVideoRef, doCandidate)\n\n            sendAnswer(localConnection, localStream, notif, doAnswer, database, username)\n            break\n          case 'answer':\n\n            this.setState({\n              connectedUser: notif.from\n            })\n            startCall(localConnection, notif)\n            break\n          case 'candidate':\n            addCandidate(localConnection, notif)\n            break\n          default:\n            break\n        }\n      }\n    }\n\n    render () {\n      return <VideoChat\n        startCall={this.startCall}\n        onLogin={this.onLogin}\n        setLocalVideoRef={this.setLocalVideoRef}\n        setRemoteVideoRef={this.setRemoteVideoRef}\n        connectedUser={this.state.connectedUser}\n      />\n    }\n}\n\nexport default VideoChatContainer\n"]},"metadata":{},"sourceType":"module"}